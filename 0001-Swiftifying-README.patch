From 6d96a960ab9f0ff027d86e13515146271bd793c6 Mon Sep 17 00:00:00 2001
From: Joe Burgess <joe@flatironschool.com>
Date: Sat, 6 Dec 2014 14:02:36 -0500
Subject: [PATCH] Swiftifying README

---
 README.md | 278 ++++++++++++++++++++++++++------------------------------------
 1 file changed, 114 insertions(+), 164 deletions(-)

diff --git a/README.md b/README.md
index 2ae9a3d..1a3def4 100644
--- a/README.md
+++ b/README.md
@@ -1,6 +1,6 @@
 ---
-tags: blocks
-languages: objc
+tags: blocks, closures
+languages: swift
 ---
 
 # CashMoneyBlocks
@@ -21,15 +21,9 @@ As senior developer, you have to do the heavy lifting of the blocks. Ha. Ha. Ha.
 
 Here is what you will need to do:
 
-1) Build a `CashRegister` class with four properties including:
+1) Build a `CashRegister` class with four properties including a store and a transactions array as well as two block properties. Since this is a lab on blocks, we'll let you figure out how to write those up. You'll want one for `couponLogic` and another for `taxLogic`.
 
-@property (strong, nonatomic) Store *store;
-
-@property (strong, nonatomic) NSArray *transactions;
-
-as well as two block properties. Since this is a lab on blocks, we'll let you figure out how to write those up. You'll want one for `couponLogic` and another for `taxLogic`.
-
-This class will also have two methods called `applyCoupons` and `calculateTax`. They will both return an NSNumber for the total dollars saved by using coupons and the total amount of tax for all transactions on the `CashRegister` respectively.
+This class will also have two methods called `applyCoupons` and `calculateTax`. They will both return an `Float` for the total dollars saved by using coupons and the total amount of tax for all transactions on the `CashRegister` respectively.
 
 2) A test suite, which we have started for you. (Expected student response: Test practice too? Yes!!!)
 
@@ -38,172 +32,128 @@ The test suite should use the logic blocks for `taxLogic` and `couponLogic` prov
 If you've done it correctly, you will be given the total savings from coupons and the total tax collected of all transactions from each store, as the expect statements suggest.
 
 ####Tax Logic
-```objc
-        NSNumber *taxAmount = @([transaction.product.price floatValue] * [cashRegister.store.state.taxRate floatValue]);
-        
-        NSCalendar *calendar = [[NSCalendar alloc] initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
-        
-        NSDateComponents *components = [[NSDateComponents alloc] init];
-        
-        switch (transaction.product.productCategory) {
-            case ProductCategoryGrocery:
-                
-                return @0;
-                
-            case ProductCategoryApparel:
-                
-                if ([cashRegister.store.state.abbreviation isEqualToString:@"NY"] &&  [transaction.product.price floatValue]  < 100)
-                {
-                    return @0;
-                }
-                
-                return taxAmount;
-                
-            case ProductCategoryEducation:
-            {
-                components.calendar = calendar;
-                components.year = 2014;
-                components.month = 8;
-                components.day = 1;
-                components.hour = 0;
-                components.minute = 0;
-                components.second = 0;
-                
-                NSDate *startOfSchoolShoppingSeason = [calendar dateFromComponents:components];
-                
-                components.calendar = calendar;
-                components.year = 2014;
-                components.month = 9;
-                components.day = 30;
-                components.hour = 23;
-                components.minute = 59;
-                components.second = 59;
-                
-                NSDate *endOfSchoolShoppingSeason = [calendar dateFromComponents:components];
-                
-                if (([transaction.dateOfTransaction compare:startOfSchoolShoppingSeason] == NSOrderedAscending) && ([transaction.dateOfTransaction compare:endOfSchoolShoppingSeason] == NSOrderedDescending)) {
-                    return @0;
-                }
-                
-                return taxAmount;
-            
-        }
-            case ProductCategoryLuxuryItem:
-                
-                return @([taxAmount floatValue] * 2);
-                
-            default:
-                return taxAmount;
-        }
-        
-        return nil;
-
+```swift
+let taxAmount = transaction.product.price * cashRegister.store!.taxRate
+let calendar = NSCalendar(calendarIdentifier: NSCalendarIdentifierGregorian)
+let components = NSDateComponents()
+components.calendar = calendar
+switch transaction.product.category
+{
+case ProductCategory.Grocery:
+return 0.0
+case ProductCategory.Apparel:
+if cashRegister.store!.state.abbreviation == "NY" && transaction.product.price < 100.0
+{
+return 0.0
+}
+return taxAmount
+case ProductCategory.Education:
+components.year = 2014
+components.month = 8
+components.day = 1
+components.hour = 0
+components.minute = 0
+components.second = 0
+
+let startOfSchoolShopping = calendar!.dateFromComponents(components)
+
+components.month = 9
+components.day = 30
+components.hour = 23
+components.minute = 59
+components.second = 59
+
+let endOfSchoolShopping = calendar!.dateFromComponents(components)
+
+if calendar?.compareDate(transaction.dateOfTransaction, toDate: startOfSchoolShopping!, toUnitGranularity: NSCalendarUnit.MinuteCalendarUnit) == NSComparisonResult.OrderedAscending && calendar?.compareDate(transaction.dateOfTransaction, toDate: endOfSchoolShopping!, toUnitGranularity: NSCalendarUnit.MinuteCalendarUnit) == NSComparisonResult.OrderedDescending
+{
+return 0.0
+}
+return taxAmount
+case ProductCategory.LuxuryItem:
+return taxAmount * 2.0
+default:
+return taxAmount
+}
 ```
 
 
 ####Coupon Logic
-```objc
-        if ([transaction.fullTransactionValue floatValue] > 10.0 && transaction.product.productCategory != ProductCategoryEducation)
-        {
-            return (@([transaction.fullTransactionValue floatValue] * .10));
-        }
-        else
-            return @0;
+```swift
+if transaction.product.category != ProductCategory.Education && transaction.fullTransactionValue > 10.0
+{
+    return transaction.fullTransactionValue * 0.10
+}
+return 0.0
 ```
 
 
 ####Transaction Data Code
-```objc
-    
-    Product *apple = [[Product alloc] initWithProductDescription:@"Granny Smith" UPC:@"0000000000415" Price:@0.95  Size:@1 Measure:@"ea" andProductCategory:ProductCategoryGrocery];
-    
-    Product *cereal = [[Product alloc] initWithProductDescription:@"Cracklin' Oat Bran" UPC:@"0038000045301" Price:@4.99 Size:@17 Measure:@"oz" andProductCategory:ProductCategoryGrocery];
-    
-    Product *vanillaGoGurt = [[Product alloc] initWithProductDescription:@"Vanilla GoGurt - To Stay, 7 oz" UPC:@"0038000045301" Price:@1.99 Size:@17 Measure:@"oz" andProductCategory:ProductCategoryGrocery];
-    
-    Product *sliceSoda = [[Product alloc] initWithProductDescription:@"That soda that you've probably heard of was once a competitor to Sprite" UPC:@"12000810060" Price:@1.99 Size:@67.628 Measure:@"fl oz" andProductCategory:ProductCategoryGrocery];
-    
-    Product *siliconValleyHoodie = [[Product alloc] initWithProductDescription:@"Silicon Valley Hoodie - Size M" UPC:@"55000030387" Price:@42.99 Size:@2 Measure:@"Mens Tee" andProductCategory:ProductCategoryApparel];
-    
-    Product *functionalProgrammingWithSwiftBook = [[Product alloc] initWithProductDescription:@"Functional Programming in Swift" UPC:@"66611000000" Price:@29.99 Size:@417 Measure:@"pages" andProductCategory:ProductCategoryEducation];
-
-    
-    NSCalendar *calendar = [[NSCalendar alloc]
-                            initWithCalendarIdentifier:NSCalendarIdentifierGregorian];
-    NSDateComponents *components = [[NSDateComponents alloc] init];
-    components.calendar = calendar;
-    components.year = 2014;
-    components.month = 5;
-    components.day = 12;
-    components.hour = 16;
-    components.minute = 1;
-    components.second = 12;
-    
-    NSDate *date1 = [calendar dateFromComponents:components];
-    
-    Transaction *transactionOne = [[Transaction alloc] initWithProduct:apple Quantity:@25 Date:date1];
-    
-    components.year = 2014;
-    components.month = 9;
-    components.day = 15;
-    components.hour = 2;
-    components.minute = 22;
-    components.second = 43;
-    NSDate *date2 = [calendar dateFromComponents:components];
-
-    Transaction *transactionTwo = [[Transaction alloc] initWithProduct:cereal Quantity:@14 Date:date2];
-
-    components.year = 2014;
-    components.month = 6;
-    components.day = 12;
-    components.hour = 12;
-    components.minute = 0;
-    components.second = 1;
-    NSDate *date3 = [calendar dateFromComponents:components];
-
-    Transaction *transactionThree = [[Transaction alloc] initWithProduct:vanillaGoGurt Quantity:@5 Date:date3];
-    
-    components.year = 2014;
-    components.month = 6;
-    components.day = 12;
-    components.hour = 12;
-    components.minute = 0;
-    components.second = 1;
-    NSDate *date4 = [calendar dateFromComponents:components];
-    
-    Transaction *transactionFour = [[Transaction alloc] initWithProduct:sliceSoda Quantity:@1 Date:date4];
-
-    components.year = 2014;
-    components.month = 6;
-    components.day = 12;
-    components.hour = 12;
-    components.minute = 0;
-    components.second = 4;
-    NSDate *date5 = [calendar dateFromComponents:components];
-    
-    Transaction *transactionFive = [[Transaction alloc] initWithProduct:siliconValleyHoodie Quantity:@1 Date:date5];
-    
-    components.year = 2014;
-    components.month = 6;
-    components.day = 12;
-    components.hour = 12;
-    components.minute = 0;
-    components.second = 10;
-    NSDate *date6 = [calendar dateFromComponents:components];
-    
-    Transaction *transactionSix = [[Transaction alloc] initWithProduct:functionalProgrammingWithSwiftBook Quantity:@1 Date:date6];
 
+```swift
+let apple = Product(productDescription: "Apple", upc: "0000000000415", price: 0.95, measure: "ea", category: ProductCategory.Grocery)
+let cereal  = Product(productDescription: "Cracklin' Oat Barn", upc: "0038000045310", price: 4.99, measure: "oz", category: ProductCategory.Grocery)
+let vanillaGoGurt  = Product(productDescription: "Vanilla GoGurt - To Stay, 7 oz", upc: "0038000045302", price: 1.99, measure: "oz", category: ProductCategory.Grocery)
+let sliceSoda  = Product(productDescription: "That soda you've probably heard of was once a competitor to Sprite", upc: "12000810060", price: 1.99, measure: "fl oz", category: ProductCategory.Grocery)
+let siliconValleyHoodie  = Product(productDescription: "Silicon Valley Hoodie - Size M", upc: "55000030387", price: 42.99, measure: "Mens Tee", category: ProductCategory.Apparel)
+let functionalProgrammingWithSwiftBook  = Product(productDescription: "Functional Programming in Swift", upc: "66611000000", price: 29.99, measure: "pages", category: ProductCategory.Education)
+
+let calendar = NSCalendar(identifier: NSCalendarIdentifierGregorian)
+let components = NSDateComponents()
+components.calendar = calendar
+components.year = 2014
+components.month = 5
+components.day = 12
+components.hour = 16
+components.minute = 1
+components.second = 12
+
+let date1 = calendar?.dateFromComponents(components)
+let transaction1 = Transaction(product: apple, quantity: 25, dateOfTransaction: date1)
+
+components.calendar = calendar
+components.year = 2014
+components.month = 6
+components.day = 12
+components.hour = 12
+components.minute = 0
+components.second = 1
+
+let date2 = calendar?.dateFromComponents(components)
+let transaction2 = Transaction(product: cereal, quantity: 14, dateOfTransaction: date2)
+
+let transaction3 = Transaction(product: vanillaGoGurt, quantity: 5, dateOfTransaction: date2)
+let transaction4 = Transaction(product: sliceSoda, quantity: 1, dateOfTransaction: date2)
+
+
+components.year = 2014
+components.month = 6
+components.day = 12
+components.hour = 12
+components.minute = 0
+components.second = 4
+
+let date3 = calendar?.dateFromComponents(components)
+let transaction5 = Transaction(product: siliconValleyHoodie, quantity: 1, dateOfTransaction: date3)
+
+components.year = 2014
+components.month = 6
+components.day = 12
+components.hour = 12
+components.minute = 0
+components.second = 10
+
+let date4 = calendar?.dateFromComponents(components)
+let transaction6 = Transaction(product: functionalProgrammingWithSwiftBook, quantity: 1, dateOfTransaction: date4)
+cashRegister = CashRegister()
+cashRegister.transactions = [transaction1,transaction2,transaction3,transaction4,transaction5,transaction6]
+let myStore = Store(state: newYork, city: "New York", storeID: "123", cashRegister: cashRegister)
+cashRegister.store = myStore 
 ```
 
-## Advanced
-Google "how to compile a static library in Objective-C", to ensure you know how to keep your end user from modifying your lovely code base! Commit before compiling.
-
 ## Notes
 
-* Enums are used here to give numeric values more meaning. Therefore instead of using the number "1" to mean a product in the apparel category, we can use `ProductCategoryApparel` instead. For more information, check out [this article](http://nshipster.com/ns_enum-ns_options/)) on the various ways to declare ENUM. (You can find our declaration of it in the `Product.h` file.)
-
+* Enums are used here to give numeric values more meaning. Therefore instead of using the number "1" to mean a product in the apparel category, we can use `ProductCategory.Apparel` instead. For more information, check out [this article](https://developer.apple.com/library/ios/documentation/Swift/Conceptual/Swift_Programming_Language/Enumerations.html)) on the various ways to declare ENUM.
 * Check out the "switch" statements in our tax and coupon logic. They take the place of "if" statements as a conditional.
-
 * In a real life scenario, we would likely have an array of products and their quantities as part of the `Transaction` object; but for today, we've chosen to simplify a bit for the sake of getting to the real point of this lab, which is blocks!
-
-* In our contrived example, the tax gets applied to the items gross price (i.e. before the coupon discount gets applied). Feel free to try to get fancy and make them work together if you get this far!
\ No newline at end of file
+* In our contrived example, the tax gets applied to the items gross price (i.e. before the coupon discount gets applied). Feel free to try to get fancy and make them work together if you get this far!
-- 
1.9.3 (Apple Git-50)

